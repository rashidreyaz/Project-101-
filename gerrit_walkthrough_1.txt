
1. Getting started with code review


Initializing the server
1.1. 
java - jar gerrit*.war init -d site1
(optionally you may do the following instead of 1.2...
cd site1/bin
java -jar gerrit.war init)
 
#Note : Auth tyep "DEVELOPMENT_BECOME_ANY_ACCOUNT"
Ensure that you have the war file in the path


1.2.Start the server & Create a user and a project
cd site1
./bin gerrit.sh start
#go to http://localhost:8080   , click become,   New User....Create 3 users Contrib1, reviewer1, publisher1
# Note create project from the first user (by default it is admin)
browser the 'projects' tab for the contrib1
copy the 'Anynonumous http' url of te project amd clone into a client folder

# creating client cloned repo
mkdir site1clone
cd site1clone

git config user.name "contrib1"
git config user.email "con1@cg.com"
git clone http://con1@localhost:8080/Conproject1


1.3. setting hooks
#Note change to the new client side project clone folder

curl -Lko .git/hooks/commit-msg http://localhost:8080/tools/hooks/commit-msg
chmod +x .git/hooks/commit-msg

1.4 Making a change
echo "My first code review" > code-review-sample.txt
git add code-review-sample.txt
git commit -m "First Change for review"
git push origin HEAD:refs/for/master
#Gerrit web-UI using the url, in the 'all' tab 'open' section

1.5 setting topic
#Note : Organizing changes in topics allows you to selectively engage with the most
appropriate audience of reviewers. A topic is a set of related changes that are
meant to fulfill a global goal or are part of a global feature.

#Note : create a new change and assign a topic called first-topic, by leveraging
the right part of the Gerrit reference after the % separator,  add the topic
parameter to indicate the target topic name.

git push origin HEAD:refs/for/master%topic=first-topic         
#This should not be another push on same commit, it will not succeed
after a fresh change is commited do a first push on the change with the topic


1.6 assigning reviewers
#note: Gerrit reference for inviting reviewers, by setting the r parameter to the reviewers e-mail

git push origin HEAD:refs/for/master%topic=first-topic,r=rew1@cg.com

#This should not be another push on same commit, it will not succeed
after a fresh change is commited do a first push on the change with the topic and a reviewer
#Note : reviewers can be added using the web-UI

#Note: Code Review activity has 2 types......
Review: Dedicated to manual code inspection. Review feedback is associated to the quality of the code and is expressed by a
numeric score ranging from -2 to + 2.

*********Unless the score is +2, the 'publish n submit' will give error'
Another is Validate: For functional verification through builds and tests

#Note : From the web-ui now click the review button on the change page
Double-click on the points of the code to comment, enter the message text, 
then click on Save to store the feedback

1.7 Publish review and scoring
Note #: Comments are not visible until we click on the Review button on the patch-set.
Draft comments will then be published and visible to all users.
Click 'Review' select feedback (numeri with comments on the web ui)
click on the Publish and Submit button.


1.8 How to Amend code under review
#Note : A review could result in a negative score that will need rework on the code. The
change then needs to be amended with a new patch-set. The best approach is to
restart with a fresh checkout of the change, so that you have a local environment
that is not contaminated by other local edits.

#note : checkout the latest version of the change using browser, by clicking on
the clipboard icon next to the download section on latest patch-set checkout command

#Do
copy the commd from the browser
(for example in my project it is 'git fetch http://minint-4e4e6ae:8080/ConProject1 refs/changes/01/1/1 && git checkout FETCH_HEAD')
paste the command onto a local clone

echo "Change amended" >> alpha-private-review.txt
git commit --amend

#note : In case you landup in the vi editer, type 'Final private published Change', do a 'Esc' key then :wq  to exit it and then push the change
git push origin HEAD:refs/for/master


#***** Note:
Gerrit associates a new commit to the same change using the change ID field. The most typical way to submit a new patch is by using the
--amend option when reworking an existing commit; otherwise, a new change ID will be generated by commit-hook and Gerrit would then
create a new change instead of adding a patch-set to the existing one.

# The reworked change has now been uploaded and all reviewers have been notified to go and check it out. Noe the next review cycle continues......

1.9 Looking at types of submits
In gerrit UI go to project tab general section, view the submit type.
You view this for 'all-projects' project it is inherited by other projects

1.10 change dependencies

#create Change A1 related to topic A
echo "Change A1" > change-a1.txt
git add change-a1.txt
git commit -a -m "Change A1"
git push origin HEAD:refs/for/master%topic=topic-A

#create Change A2 on top of Change A1
echo "Change A2" >> change-a1.txt
git commit -a -m "Change A2"
git push origin HEAD:refs/for/master%topic=topic-A

#reset the current HEAD to Change A1 and create a new Change B on top
git checkout HEAD^

echo "Change B" > change-b.txt
git add change-b.txt
git commit -m "Change B"

git push origin HEAD:refs/for/master

#create Change C on top of Change B, the current HEAD
echo "Change C" > change-c.txt
git add change-c.txt
git commit -m "Change C"
git push origin HEAD:refs/for/master

#view the dependency in web UI

In Gerrit web-UI view the Change A1 the dependencies section

1.11 Understanding the change graph updates
#make Change A1 active in our local workspace
git checkout HEAD^^
echo "Change A1 amended" >> change-a1.txt
git commit --amend
#note : In case you landup in the vi editer, type 'Change A1 amneded', do a 'Esc' key then :wq  to exit it

git push origin HEAD:refs/for/master%topic=topic-A 

#Note : A new patch-set has been pushed to Change A1.Change B is now flagged with an outdated dependency
To re-synchronize the dependency, select the strategy by clicking correct button at the bottom of the Change B – patch-set 1
(Rebase Change/Abandon Change)

#Note : Selecting Rebase Change will automatically create a new patch-set 2, this will automatically refreshe the
dependency pointing back to Change A1 and makes it to up-to-date.


#Note : In cases where the rebase result is in conflicts, the operation will fail and the
rebase would need to be performed manually and pushed as an additional patch-set.

#Note : Rebase of Change B creates outdated dependency with Change C. 
The operation must be repeated through the dependency chain until all of the
dependencies are turned back to up-to-date.


1.12 The GSQL tool 
#Stop the server, give the following commands from the correct directory 

.bin/gerrit.sh stop
.java -jar bin/gerrit.war gsql

#Note : Now you are in the sql prompt
try following commands

select * from ACCOUNT_EXTERNAL_IDS;
update ACCOUNT_EXTERNAL_IDS set EMAIL_ADDRESS='con2@cg.com' where ACCOUNT_ID=1000000;

select * from ACCOUNT_EXTERNAL_IDS;

















